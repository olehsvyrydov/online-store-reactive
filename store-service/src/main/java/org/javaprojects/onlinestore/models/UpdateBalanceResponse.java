/*
 * Sample API
 * This is a sample API for managing payments and balance. It includes endpoints for making payments and checking the account balance. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.javaprojects.onlinestore.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * UpdateBalanceResponse
 */
@JsonPropertyOrder({
  UpdateBalanceResponse.JSON_PROPERTY_SUCCESS,
  UpdateBalanceResponse.JSON_PROPERTY_CURRENT_BALANCE,
  UpdateBalanceResponse.JSON_PROPERTY_ERROR
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class UpdateBalanceResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_SUCCESS = "success";
  @jakarta.annotation.Nullable
  private Boolean success;

  public static final String JSON_PROPERTY_CURRENT_BALANCE = "currentBalance";
  @jakarta.annotation.Nullable
  private Float currentBalance;

  public static final String JSON_PROPERTY_ERROR = "error";
  @jakarta.annotation.Nullable
  private String error;

  public UpdateBalanceResponse() {
  }

  public UpdateBalanceResponse success(@jakarta.annotation.Nullable Boolean success) {
    
    this.success = success;
    return this;
  }

  /**
   * Get success
   * @return success
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUCCESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSuccess() {
    return success;
  }


  @JsonProperty(JSON_PROPERTY_SUCCESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuccess(@jakarta.annotation.Nullable Boolean success) {
    this.success = success;
  }

  public UpdateBalanceResponse currentBalance(@jakarta.annotation.Nullable Float currentBalance) {
    
    this.currentBalance = currentBalance;
    return this;
  }

  /**
   * Get currentBalance
   * @return currentBalance
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Float getCurrentBalance() {
    return currentBalance;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentBalance(@jakarta.annotation.Nullable Float currentBalance) {
    this.currentBalance = currentBalance;
  }

  public UpdateBalanceResponse error(@jakarta.annotation.Nullable String error) {
    
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getError() {
    return error;
  }


  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setError(@jakarta.annotation.Nullable String error) {
    this.error = error;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateBalanceResponse updateBalanceResponse = (UpdateBalanceResponse) o;
    return Objects.equals(this.success, updateBalanceResponse.success) &&
        Objects.equals(this.currentBalance, updateBalanceResponse.currentBalance) &&
        Objects.equals(this.error, updateBalanceResponse.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(success, currentBalance, error);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateBalanceResponse {\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    currentBalance: ").append(toIndentedString(currentBalance)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


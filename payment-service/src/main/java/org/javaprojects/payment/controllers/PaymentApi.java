/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.javaprojects.payment.controllers;

import org.javaprojects.payment.dtos.UpdateBalanceResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import jakarta.validation.constraints.*;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "Payment", description = "Operations related to payments")
public interface PaymentApi {

    /**
     * GET /pay/{amount} : Making a payment
     * This is request to subtract the amount from the account.  If the amount is greater than the balance, it will return false. 
     *
     * @param amount Amount to be paid (required)
     * @return Payment information This will return true if the payment was successful, false otherwise.  (status code 200)
     *         or Bad request in case of invalid amount (status code 400)
     */
    @Operation(
        operationId = "makePayment",
        summary = "Making a payment",
        description = "This is request to subtract the amount from the account.  If the amount is greater than the balance, it will return false. ",
        tags = { "Payment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Payment information This will return true if the payment was successful, false otherwise. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateBalanceResponse.class), examples = {
                    @ExampleObject(
                        name = "",
                        value = "{\"success\":true,\"currentBalance\":90.2,\"error\":null}"
                    )
                })

            }),
            @ApiResponse(responseCode = "400", description = "Bad request in case of invalid amount", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateBalanceResponse.class), examples = {
                    @ExampleObject(
                        name = "",
                        value = "{\"success\":false,\"currentBalance\":10.3,\"error\":\"Insufficient balance\"}"
                    ),
                    @ExampleObject(
                        name = "",
                        value = "{\"success\":false,\"currentBalance\":10.3,\"error\":\"Validation exception\"}"
                    )
                })

            })
        },
        security = {
            @SecurityRequirement(name = "shop-auth", scopes={ "profile" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pay/{amount}",
        produces = { "application/json" }
    )

    default Mono<ResponseEntity<UpdateBalanceResponse>> makePayment(
        @DecimalMin("0") @Parameter(name = "amount", description = "Amount to be paid", required = true, in = ParameterIn.PATH) @PathVariable("amount") Float amount,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.valueOf(200));
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"success\" : true, \"currentBalance\" : 0.8008282, \"error\" : \"error\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"success\" : true, \"currentBalance\" : 0.8008282, \"error\" : \"error\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
